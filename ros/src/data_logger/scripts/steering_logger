#!/usr/bin/env python

import cv2
import csv
import os
import rospy
from sensor_msgs.msg import Image
from std_msgs.msg import Float32
from cv_bridge import CvBridge, CvBridgeError


class SteeringLogger(object):

    def __init__(self):
        self.current_angle = 0.0
        self.labels = []
        self.image_files = []
        self.count = 0
        self.bridge = CvBridge()
        self.path = rospy.get_param("/steering_logger/logger_path")
        rospy.loginfo(self.path)

        if not os.path.exists(self.path + "/center/"):
            os.makedirs(self.path + "/center/")

        rospy.init_node('steering_logger')
        rospy.Subscriber('/vehicle/sensor/camera/front/image_color', Image, callback=self.logger_callback, queue_size=5)
        rospy.Subscriber('/sensor/vehicle/steering/actuator_position', Float32, callback=self.encoder_callback, queue_size=5)
        rospy.on_shutdown(self.save_data)

        rospy.spin()

    def save_data(self):

        with open(self.path + "/lables.csv", 'w') as myfile:
            wr = csv.writer(myfile, lineterminator='\n')
            for row in self.labels:
                wr.writerow(row)
        rospy.loginfo('data saved')

    def encoder_callback(self, data):
        self.current_angle = data.data

    def logger_callback(self, data):

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            raise e

        self.count += 1
        cv2.imwrite(self.path + "/center/" + str(self.count) + ".png", cv_image)
        row = ["/center/" + str(self.count) + ".png", self.current_angle]
        self.labels.append(row)


if __name__ == '__main__':

    try:
        SteeringLogger()
    except rospy.ROSInterruptException:
        pass